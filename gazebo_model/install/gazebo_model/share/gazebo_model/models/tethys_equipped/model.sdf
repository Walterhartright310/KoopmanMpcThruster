<?xml version="1.0"?>
<!--
  Development of this module has been funded by the Monterey Bay Aquarium
  Research Institute (MBARI) and the David and Lucile Packard Foundation
-->
<sdf version="1.9">
  <model name="equipped_tethys">
    <enable_wind>true</enable_wind>

    <include merge="true">
      <!-- align with NED (face North) -->
      <pose degrees="true">0 0 0 0 0 0</pose>
      <uri>tethys</uri>

      
      <!-- Joint controllers -->
      <plugin
        filename="gz-sim-joint-position-controller-system"
        name="gz::sim::systems::JointPositionController">
        <joint_name>horizontal_fins_joint</joint_name>
        <topic>horizontal_pos</topic>
        <p_gain>0.1</p_gain>
      </plugin>
      <plugin
        filename="gz-sim-joint-position-controller-system"
        name="gz::sim::systems::JointPositionController">
        <joint_name>vertical_fins_joint</joint_name>
        <p_gain>0.1</p_gain>
      </plugin>
      
      
      <!--
      
<namespace>: The namespace in which the robot exists. The plugin will listen on the topic /model/{namespace}/joint/{joint_name}/cmd_thrustor /model/{namespace}/joint/{joint_name}/cmd_vel depending    on the mode of operation. If {topic} is set then the plugin will listen on {namespace}/{topic} [Optional]
<topic>: The topic for receiving thrust commands. [Optional]
<joint_name>: This is the joint in the model which corresponds to the propeller. [Required]
<use_angvel_cmd>: If set to true will make the thruster plugin accept commands in angular velocity in radians per seconds in terms of newtons. [Optional, Boolean, defaults to false]
<fluid_density>: The fluid density of the liquid in which the thruster is operating in. [Optional, kg/m^3, defaults to 1000 kg/m^3]
<propeller_diameter>: The diameter of the propeller in meters. [Optional, m, defaults to 0.02m]
<thrust_coefficient>: This is the coefficient which relates the angular velocity to thrust. A positive coefficient corresponds to a clockwise propeller, which is a propeller that spins clockwise under positive thrust when viewed along the parent link from stern (-x) to bow (+x). [Optional, no units, defaults to 1.0]
omega = sqrt(thrust /(fluid_density * thrust_coefficient * propeller_diameter ^ 4))
where omega is the propeller's angular velocity in rad/s.
<velocity_control>: If true, use joint velocity commands to rotate the propeller. If false, use a PID controller to apply wrenches directly to the propeller link instead. [Optional, defaults to false].
<p_gain>: Proportional gain for joint PID controller. [Optional, no units, defaults to 0.1]
<i_gain>: Integral gain for joint PID controller. [Optional, no units, defaults to 0.0]
<d_gain>: Derivative gain for joint PID controller. [Optional, no units, defaults to 0.0]
<max_thrust_cmd>: Maximum input thrust or angular velocity command. [Optional, defaults to 1000N or 1000rad/s]
<min_thrust_cmd>: Minimum input thrust or angular velocity command. [Optional, defaults to -1000N or -1000rad/s]
<deadband>: Deadband of the thruster. Absolute value below which the thruster won't spin nor generate thrust. This value can be changed at runtime using a topic. The topic is either /model/{ns}/joint/{jointName}/enable_deadband or {ns}/{topic}/enable_deadband depending on other params
<wake_fraction>: Relative speed reduction between the water at the propeller (Va) vs behind the vessel. [Optional, defults to 0.2]

See Thor I Fossen's "Guidance and Control of ocean vehicles" p. 95:

Va = (1 - wake_fraction) * advance_speed
<alpha_1>: Constant given by the open water propeller diagram. Used in the calculation of the thrust coefficient (Kt). [Optional, defults to 1]
<alpha_2>: Constant given by the open water propeller diagram. Used in the calculation of the thrust coefficient (Kt). [Optional, defults to 0]

See Thor I Fossen's "Guidance and Control of ocean vehicles" p. 95:

Kt = alpha_1 * alpha_2 *
    (Va / (propeller_revolution * propeller_diameter))
-->
<plugin
        filename="gz-sim-thruster-system"
        name="gz::sim::systems::Thruster">
        <namespace>tethys</namespace>
        <joint_name>propeller_joint</joint_name>
        <!-- Be sure to update TethysComm when updating these numbers -->
        <thrust_coefficient>0.004312328425753156</thrust_coefficient>
        <fluid_density>1000</fluid_density>
        <propeller_diameter>0.2</propeller_diameter>
        <velocity_control>true</velocity_control>
        <use_angvel_cmd>true</use_angvel_cmd>
        <topic>propeller_cml</topic>
        <alpha_1> 1 </alpha_1>
        <alpha_2> 0.1 </alpha_2>
      </plugin>
     
      <!-- Lift and drag -->
      
     
      <plugin
        filename="gz-sim-hydrodynamics-system"
        name="gz::sim::systems::Hydrodynamics">
        <link_name>base_link</link_name>
        <xDotU>-4.876161</xDotU>
        <yDotV>-126.324739</yDotV>
        <zDotW>-126.324739</zDotW>
        <kDotP>0</kDotP>
        <mDotQ>-33.46</mDotQ>
        <nDotR>-33.46</nDotR>
        <xUabsU>-6.2282</xUabsU>
        <xU>0</xU>
        <yVabsV>-601.27</yVabsV>
        <yV>0</yV>
        <zWabsW>-601.27</zWabsW>
        <zW>0</zW>
        <kPabsP>-0.1916</kPabsP>
        <kP>0</kP>
        <mQabsQ>-632.698957</mQabsQ>
        <mQ>0</mQ>
        <nRabsR>-632.698957</nRabsR>
        <nR>0</nR>
      </plugin>
      <plugin
        filename="gz-sim-buoyancy-engine-system"
        name="gz::sim::systems::BuoyancyEngine">
        <link_name>buoyancy_engine</link_name>
        <namespace>tethys</namespace>
        <fluid_density>1000</fluid_density>
        <!-- 80 cc == 0.00008 m^3 -->
        <min_volume>0.000080</min_volume>
        <!-- 500 cc == 0.0005 m^3 -->
        <neutral_volume>0.0005</neutral_volume>
        <default_volume>0.0005</default_volume>
        <!-- 955 cc == 0.000955 m^3 -->
        <max_volume>0.000955</max_volume>
        <!-- m^3/s -->
        <max_inflation_rate>0.000003</max_inflation_rate>
      </plugin>
    
  <plugin filename="gz-sim-odometry-publisher-system"
        name="gz::sim::systems::OdometryPublisher">
        <dimensions>3 </dimensions>
        <odom_publish_frequency>10 </odom_publish_frequency>
     </plugin>
   
     

    </include>
  </model>
</sdf>
